{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cryptos: [],\n  priceHistory: {},\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst calculatePercentageChange = (prices, timeframe) => {\n  var _prices$find, _prices$, _prices;\n  const now = Date.now();\n  const oldPrice = ((_prices$find = prices.find(p => p.timestamp >= now - timeframe)) === null || _prices$find === void 0 ? void 0 : _prices$find.price) || ((_prices$ = prices[0]) === null || _prices$ === void 0 ? void 0 : _prices$.price);\n  const currentPrice = (_prices = prices[prices.length - 1]) === null || _prices === void 0 ? void 0 : _prices.price;\n  if (!oldPrice || !currentPrice) return 0;\n  return (currentPrice - oldPrice) / oldPrice * 100;\n};\nexport const cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState,\n  reducers: {\n    setCryptos: (state, action) => {\n      state.cryptos = action.payload;\n      // Initialize price history for each crypto\n      action.payload.forEach(crypto => {\n        if (!state.priceHistory[crypto.symbol]) {\n          state.priceHistory[crypto.symbol] = {\n            prices: [{\n              price: crypto.price,\n              timestamp: Date.now()\n            }]\n          };\n        }\n      });\n      state.loading = false;\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setWsConnected: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    updateCryptoPrice: (state, action) => {\n      const {\n        symbol,\n        price,\n        timestamp\n      } = action.payload;\n      const crypto = state.cryptos.find(c => c.symbol === symbol);\n      if (crypto) {\n        // Update current price\n        crypto.price = price;\n        crypto.lastUpdate = timestamp;\n\n        // Update price history\n        if (!state.priceHistory[symbol]) {\n          state.priceHistory[symbol] = {\n            prices: []\n          };\n        }\n        state.priceHistory[symbol].prices.push({\n          price,\n          timestamp\n        });\n\n        // Keep only last 7 days of price history\n        const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n        state.priceHistory[symbol].prices = state.priceHistory[symbol].prices.filter(p => p.timestamp >= sevenDaysAgo);\n\n        // Update chart data\n        crypto.chartData = [...crypto.chartData.slice(1), price];\n\n        // Calculate percentage changes\n        const prices = state.priceHistory[symbol].prices;\n        crypto.change1h = calculatePercentageChange(prices, 60 * 60 * 1000); // 1 hour\n        crypto.change24h = calculatePercentageChange(prices, 24 * 60 * 60 * 1000); // 24 hours\n        crypto.change7d = calculatePercentageChange(prices, 7 * 24 * 60 * 60 * 1000); // 7 days\n      }\n    }\n  }\n});\nexport const {\n  setCryptos,\n  setLoading,\n  setError,\n  setWsConnected,\n  updateCryptoPrice\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cryptos","priceHistory","loading","error","wsConnected","calculatePercentageChange","prices","timeframe","_prices$find","_prices$","_prices","now","Date","oldPrice","find","p","timestamp","price","currentPrice","length","cryptoSlice","name","reducers","setCryptos","state","action","payload","forEach","crypto","symbol","setLoading","setError","setWsConnected","updateCryptoPrice","c","lastUpdate","push","sevenDaysAgo","filter","chartData","slice","change1h","change24h","change7d","actions","reducer"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/features/crypto/cryptoSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CryptoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  logo: string;\r\n  price: number;\r\n  change1h: number;\r\n  change24h: number;\r\n  change7d: number;\r\n  marketCap: number;\r\n  volume24h: number;\r\n  circulatingSupply: number;\r\n  maxSupply: number | null;\r\n  chartData: number[];\r\n  lastUpdate: number;\r\n}\r\n\r\ninterface PriceHistory {\r\n  [symbol: string]: {\r\n    prices: { price: number; timestamp: number }[];\r\n  };\r\n}\r\n\r\ninterface CryptoState {\r\n  cryptos: CryptoData[];\r\n  priceHistory: PriceHistory;\r\n  loading: boolean;\r\n  error: string | null;\r\n  wsConnected: boolean;\r\n}\r\n\r\nconst initialState: CryptoState = {\r\n  cryptos: [],\r\n  priceHistory: {},\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false\r\n};\r\n\r\nconst calculatePercentageChange = (prices: { price: number; timestamp: number }[], timeframe: number): number => {\r\n  const now = Date.now();\r\n  const oldPrice = prices.find(p => p.timestamp >= now - timeframe)?.price || prices[0]?.price;\r\n  const currentPrice = prices[prices.length - 1]?.price;\r\n  \r\n  if (!oldPrice || !currentPrice) return 0;\r\n  return ((currentPrice - oldPrice) / oldPrice) * 100;\r\n};\r\n\r\nexport const cryptoSlice = createSlice({\r\n  name: 'crypto',\r\n  initialState,\r\n  reducers: {\r\n    setCryptos: (state, action: PayloadAction<CryptoData[]>) => {\r\n      state.cryptos = action.payload;\r\n      // Initialize price history for each crypto\r\n      action.payload.forEach(crypto => {\r\n        if (!state.priceHistory[crypto.symbol]) {\r\n          state.priceHistory[crypto.symbol] = {\r\n            prices: [{\r\n              price: crypto.price,\r\n              timestamp: Date.now()\r\n            }]\r\n          };\r\n        }\r\n      });\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setWsConnected: (state, action: PayloadAction<boolean>) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    updateCryptoPrice: (state, action: PayloadAction<{\r\n      symbol: string;\r\n      price: number;\r\n      timestamp: number;\r\n    }>) => {\r\n      const { symbol, price, timestamp } = action.payload;\r\n      const crypto = state.cryptos.find(c => c.symbol === symbol);\r\n      \r\n      if (crypto) {\r\n        // Update current price\r\n        crypto.price = price;\r\n        crypto.lastUpdate = timestamp;\r\n        \r\n        // Update price history\r\n        if (!state.priceHistory[symbol]) {\r\n          state.priceHistory[symbol] = { prices: [] };\r\n        }\r\n        \r\n        state.priceHistory[symbol].prices.push({ price, timestamp });\r\n        \r\n        // Keep only last 7 days of price history\r\n        const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n        state.priceHistory[symbol].prices = state.priceHistory[symbol].prices.filter(\r\n          p => p.timestamp >= sevenDaysAgo\r\n        );\r\n        \r\n        // Update chart data\r\n        crypto.chartData = [...crypto.chartData.slice(1), price];\r\n        \r\n        // Calculate percentage changes\r\n        const prices = state.priceHistory[symbol].prices;\r\n        crypto.change1h = calculatePercentageChange(prices, 60 * 60 * 1000); // 1 hour\r\n        crypto.change24h = calculatePercentageChange(prices, 24 * 60 * 60 * 1000); // 24 hours\r\n        crypto.change7d = calculatePercentageChange(prices, 7 * 24 * 60 * 60 * 1000); // 7 days\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCryptos, \r\n  setLoading, \r\n  setError, \r\n  setWsConnected,\r\n  updateCryptoPrice \r\n} = cryptoSlice.actions;\r\n\r\nexport default cryptoSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}