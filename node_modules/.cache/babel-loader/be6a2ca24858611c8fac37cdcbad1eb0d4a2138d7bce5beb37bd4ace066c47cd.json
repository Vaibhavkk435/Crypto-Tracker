{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cryptos: [],\n  priceHistory: {},\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst TIMEFRAMES = {\n  '1h': 60 * 60 * 1000,\n  '24h': 24 * 60 * 60 * 1000,\n  '7d': 7 * 24 * 60 * 60 * 1000\n};\nconst calculatePercentageChange = (currentPrice, basePrice) => {\n  if (!basePrice) return 0;\n  const change = (currentPrice - basePrice) / basePrice * 100;\n  // Limit to 2 decimal places and handle Infinity\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\n};\nexport const cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState,\n  reducers: {\n    setCryptos: (state, action) => {\n      state.cryptos = action.payload;\n      // Initialize price history for each crypto\n      action.payload.forEach(crypto => {\n        if (!state.priceHistory[crypto.symbol]) {\n          state.priceHistory[crypto.symbol] = {\n            prices: [],\n            basePrice1h: crypto.price,\n            basePrice24h: crypto.price,\n            basePrice7d: crypto.price,\n            lastUpdateTime: {\n              '1h': Date.now(),\n              '24h': Date.now(),\n              '7d': Date.now()\n            }\n          };\n        }\n      });\n      state.loading = false;\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setWsConnected: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    updateCryptoPrice: (state, action) => {\n      const crypto = state.cryptos.find(c => c.id === action.payload.id);\n      if (crypto) {\n        const oldPrice = crypto.price;\n        crypto.price = action.payload.price;\n\n        // Update percentage changes\n        if (oldPrice > 0) {\n          crypto.change1h = calculatePercentageChange(action.payload.price, oldPrice);\n          // Update chart data\n          crypto.chartData.push({\n            time: new Date().getTime(),\n            price: action.payload.price\n          });\n\n          // Keep only last 24 hours of data (assuming 1 update per minute)\n          const oneDayAgo = new Date().getTime() - 24 * 60 * 60 * 1000;\n          crypto.chartData = crypto.chartData.filter(data => data.time >= oneDayAgo);\n\n          // Calculate 24h change based on oldest available data point\n          const oldestData = crypto.chartData[0];\n          if (oldestData) {\n            crypto.change24h = calculatePercentageChange(action.payload.price, oldestData.price);\n          }\n        }\n        crypto.lastUpdate = new Date().toISOString();\n      }\n    }\n  }\n});\nexport const {\n  setCryptos,\n  setLoading,\n  setError,\n  setWsConnected,\n  updateCryptoPrice\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cryptos","priceHistory","loading","error","wsConnected","TIMEFRAMES","calculatePercentageChange","currentPrice","basePrice","change","isFinite","Math","round","cryptoSlice","name","reducers","setCryptos","state","action","payload","forEach","crypto","symbol","prices","basePrice1h","price","basePrice24h","basePrice7d","lastUpdateTime","Date","now","setLoading","setError","setWsConnected","updateCryptoPrice","find","c","id","oldPrice","change1h","chartData","push","time","getTime","oneDayAgo","filter","data","oldestData","change24h","lastUpdate","toISOString","actions","reducer"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/features/crypto/cryptoSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CryptoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  logo: string;\r\n  price: number;\r\n  change1h: number;\r\n  change24h: number;\r\n  change7d: number;\r\n  marketCap: number;\r\n  volume24h: number;\r\n  circulatingSupply: number;\r\n  maxSupply: number | null;\r\n  chartData: number[];\r\n  lastUpdate: number;\r\n}\r\n\r\ninterface PriceHistory {\r\n  [symbol: string]: {\r\n    prices: { price: number; timestamp: number }[];\r\n    basePrice1h: number;\r\n    basePrice24h: number;\r\n    basePrice7d: number;\r\n    lastUpdateTime: { [key: string]: number };\r\n  };\r\n}\r\n\r\ninterface CryptoState {\r\n  cryptos: CryptoData[];\r\n  priceHistory: PriceHistory;\r\n  loading: boolean;\r\n  error: string | null;\r\n  wsConnected: boolean;\r\n}\r\n\r\nconst initialState: CryptoState = {\r\n  cryptos: [],\r\n  priceHistory: {},\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false\r\n};\r\n\r\nconst TIMEFRAMES = {\r\n  '1h': 60 * 60 * 1000,\r\n  '24h': 24 * 60 * 60 * 1000,\r\n  '7d': 7 * 24 * 60 * 60 * 1000\r\n};\r\n\r\nconst calculatePercentageChange = (currentPrice: number, basePrice: number): number => {\r\n  if (!basePrice) return 0;\r\n  const change = ((currentPrice - basePrice) / basePrice) * 100;\r\n  // Limit to 2 decimal places and handle Infinity\r\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\r\n};\r\n\r\nexport const cryptoSlice = createSlice({\r\n  name: 'crypto',\r\n  initialState,\r\n  reducers: {\r\n    setCryptos: (state, action: PayloadAction<CryptoData[]>) => {\r\n      state.cryptos = action.payload;\r\n      // Initialize price history for each crypto\r\n      action.payload.forEach(crypto => {\r\n        if (!state.priceHistory[crypto.symbol]) {\r\n          state.priceHistory[crypto.symbol] = {\r\n            prices: [],\r\n            basePrice1h: crypto.price,\r\n            basePrice24h: crypto.price,\r\n            basePrice7d: crypto.price,\r\n            lastUpdateTime: {\r\n              '1h': Date.now(),\r\n              '24h': Date.now(),\r\n              '7d': Date.now()\r\n            }\r\n          };\r\n        }\r\n      });\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setWsConnected: (state, action: PayloadAction<boolean>) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    updateCryptoPrice: (state, action: PayloadAction<{ id: string; price: number }>) => {\r\n      const crypto = state.cryptos.find(c => c.id === action.payload.id);\r\n      if (crypto) {\r\n        const oldPrice = crypto.price;\r\n        crypto.price = action.payload.price;\r\n        \r\n        // Update percentage changes\r\n        if (oldPrice > 0) {\r\n          crypto.change1h = calculatePercentageChange(action.payload.price, oldPrice);\r\n          // Update chart data\r\n          crypto.chartData.push({\r\n            time: new Date().getTime(),\r\n            price: action.payload.price\r\n          });\r\n          \r\n          // Keep only last 24 hours of data (assuming 1 update per minute)\r\n          const oneDayAgo = new Date().getTime() - 24 * 60 * 60 * 1000;\r\n          crypto.chartData = crypto.chartData.filter(data => data.time >= oneDayAgo);\r\n          \r\n          // Calculate 24h change based on oldest available data point\r\n          const oldestData = crypto.chartData[0];\r\n          if (oldestData) {\r\n            crypto.change24h = calculatePercentageChange(action.payload.price, oldestData.price);\r\n          }\r\n        }\r\n        \r\n        crypto.lastUpdate = new Date().toISOString();\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCryptos, \r\n  setLoading, \r\n  setError, \r\n  setWsConnected,\r\n  updateCryptoPrice \r\n} = cryptoSlice.actions;\r\n\r\nexport default cryptoSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}