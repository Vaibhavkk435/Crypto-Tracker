{"ast":null,"code":"import { updateCryptoPrice, setWsConnected, setError } from '../features/crypto/cryptoSlice';\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.dispatch = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = 3000;\n    this.priceHistory = {};\n    this.lastPrices = {};\n  }\n  initialize(dispatch, symbols) {\n    this.dispatch = dispatch;\n    this.priceHistory = {};\n    this.lastPrices = {};\n\n    // Initialize price history for each symbol\n    symbols.forEach(symbol => {\n      this.priceHistory[symbol] = [];\n    });\n    this.connect(symbols);\n  }\n  connect(symbols) {\n    try {\n      // Convert symbols to lowercase and create subscription string\n      const streams = symbols.map(symbol => `${symbol.toLowerCase()}usdt@trade`).join('/');\n      const wsUrl = `wss://stream.binance.com:9443/ws/${streams}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket Connected');\n        this.reconnectAttempts = 0;\n        if (this.dispatch) {\n          this.dispatch(setWsConnected(true));\n        }\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.e === 'trade' && this.dispatch) {\n            const symbol = data.s.replace('USDT', '');\n            const price = parseFloat(data.p);\n            const timestamp = data.T;\n\n            // Update price history\n            if (!this.priceHistory[symbol]) {\n              this.priceHistory[symbol] = [];\n            }\n\n            // Add new price point\n            this.priceHistory[symbol].push({\n              price,\n              timestamp\n            });\n\n            // Keep only last 7 days of price history\n            const sevenDaysAgo = timestamp - 7 * 24 * 60 * 60 * 1000;\n            this.priceHistory[symbol] = this.priceHistory[symbol].filter(p => p.timestamp >= sevenDaysAgo);\n\n            // Calculate percentage changes\n            const changes = this.calculateChanges(symbol, price, timestamp);\n\n            // Only dispatch if price has changed significantly (0.01% change)\n            const lastPrice = this.lastPrices[symbol];\n            if (!lastPrice || Math.abs((price - lastPrice) / lastPrice) >= 0.0001) {\n              this.lastPrices[symbol] = price;\n              this.dispatch(updateCryptoPrice({\n                symbol,\n                price,\n                timestamp,\n                ...changes\n              }));\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        if (this.dispatch) {\n          this.dispatch(setWsConnected(false));\n        }\n        this.handleReconnect(symbols);\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        if (this.dispatch) {\n          this.dispatch(setError('WebSocket connection error'));\n        }\n      };\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n      this.handleReconnect(symbols);\n    }\n  }\n  calculateChanges(symbol, currentPrice, currentTimestamp) {\n    const history = this.priceHistory[symbol];\n    if (!history || history.length < 2) {\n      return {\n        change1h: 0,\n        change24h: 0,\n        change7d: 0\n      };\n    }\n    const oneHourAgo = currentTimestamp - 60 * 60 * 1000;\n    const oneDayAgo = currentTimestamp - 24 * 60 * 60 * 1000;\n    const sevenDaysAgo = currentTimestamp - 7 * 24 * 60 * 60 * 1000;\n    const findClosestPrice = targetTime => {\n      let closest = history[0];\n      for (let i = 1; i < history.length; i++) {\n        if (Math.abs(history[i].timestamp - targetTime) < Math.abs(closest.timestamp - targetTime)) {\n          closest = history[i];\n        }\n      }\n      return closest.price;\n    };\n    const hourPrice = findClosestPrice(oneHourAgo);\n    const dayPrice = findClosestPrice(oneDayAgo);\n    const weekPrice = findClosestPrice(sevenDaysAgo);\n    const calculatePercentage = oldPrice => (currentPrice - oldPrice) / oldPrice * 100;\n    return {\n      change1h: calculatePercentage(hourPrice),\n      change24h: calculatePercentage(dayPrice),\n      change7d: calculatePercentage(weekPrice)\n    };\n  }\n  handleReconnect(symbols) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => this.connect(symbols), this.reconnectTimeout);\n    } else if (this.dispatch) {\n      this.dispatch(setError('Unable to establish WebSocket connection after multiple attempts'));\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\nexport const wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["updateCryptoPrice","setWsConnected","setError","WebSocketService","constructor","ws","dispatch","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","priceHistory","lastPrices","initialize","symbols","forEach","symbol","connect","streams","map","toLowerCase","join","wsUrl","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","e","s","replace","price","parseFloat","p","timestamp","T","push","sevenDaysAgo","filter","changes","calculateChanges","lastPrice","Math","abs","error","onclose","handleReconnect","onerror","currentPrice","currentTimestamp","history","length","change1h","change24h","change7d","oneHourAgo","oneDayAgo","findClosestPrice","targetTime","closest","i","hourPrice","dayPrice","weekPrice","calculatePercentage","oldPrice","setTimeout","disconnect","close","wsService"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/services/websocket.ts"],"sourcesContent":["import { Dispatch } from '@reduxjs/toolkit';\r\nimport { updateCryptoPrice, setWsConnected, setError } from '../features/crypto/cryptoSlice';\r\n\r\ninterface PriceData {\r\n  price: number;\r\n  timestamp: number;\r\n}\r\n\r\nclass WebSocketService {\r\n  private ws: WebSocket | null = null;\r\n  private dispatch: Dispatch | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout = 3000;\r\n  private priceHistory: { [symbol: string]: PriceData[] } = {};\r\n  private lastPrices: { [symbol: string]: number } = {};\r\n\r\n  initialize(dispatch: Dispatch, symbols: string[]) {\r\n    this.dispatch = dispatch;\r\n    this.priceHistory = {};\r\n    this.lastPrices = {};\r\n    \r\n    // Initialize price history for each symbol\r\n    symbols.forEach(symbol => {\r\n      this.priceHistory[symbol] = [];\r\n    });\r\n    \r\n    this.connect(symbols);\r\n  }\r\n\r\n  private connect(symbols: string[]) {\r\n    try {\r\n      // Convert symbols to lowercase and create subscription string\r\n      const streams = symbols.map(symbol => `${symbol.toLowerCase()}usdt@trade`).join('/');\r\n      const wsUrl = `wss://stream.binance.com:9443/ws/${streams}`;\r\n\r\n      this.ws = new WebSocket(wsUrl);\r\n\r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket Connected');\r\n        this.reconnectAttempts = 0;\r\n        if (this.dispatch) {\r\n          this.dispatch(setWsConnected(true));\r\n        }\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.e === 'trade' && this.dispatch) {\r\n            const symbol = data.s.replace('USDT', '');\r\n            const price = parseFloat(data.p);\r\n            const timestamp = data.T;\r\n\r\n            // Update price history\r\n            if (!this.priceHistory[symbol]) {\r\n              this.priceHistory[symbol] = [];\r\n            }\r\n\r\n            // Add new price point\r\n            this.priceHistory[symbol].push({ price, timestamp });\r\n\r\n            // Keep only last 7 days of price history\r\n            const sevenDaysAgo = timestamp - 7 * 24 * 60 * 60 * 1000;\r\n            this.priceHistory[symbol] = this.priceHistory[symbol].filter(\r\n              p => p.timestamp >= sevenDaysAgo\r\n            );\r\n\r\n            // Calculate percentage changes\r\n            const changes = this.calculateChanges(symbol, price, timestamp);\r\n\r\n            // Only dispatch if price has changed significantly (0.01% change)\r\n            const lastPrice = this.lastPrices[symbol];\r\n            if (!lastPrice || Math.abs((price - lastPrice) / lastPrice) >= 0.0001) {\r\n              this.lastPrices[symbol] = price;\r\n              this.dispatch(updateCryptoPrice({\r\n                symbol,\r\n                price,\r\n                timestamp,\r\n                ...changes\r\n              }));\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        if (this.dispatch) {\r\n          this.dispatch(setWsConnected(false));\r\n        }\r\n        this.handleReconnect(symbols);\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        if (this.dispatch) {\r\n          this.dispatch(setError('WebSocket connection error'));\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('WebSocket connection error:', error);\r\n      this.handleReconnect(symbols);\r\n    }\r\n  }\r\n\r\n  private calculateChanges(symbol: string, currentPrice: number, currentTimestamp: number) {\r\n    const history = this.priceHistory[symbol];\r\n    if (!history || history.length < 2) {\r\n      return { change1h: 0, change24h: 0, change7d: 0 };\r\n    }\r\n\r\n    const oneHourAgo = currentTimestamp - 60 * 60 * 1000;\r\n    const oneDayAgo = currentTimestamp - 24 * 60 * 60 * 1000;\r\n    const sevenDaysAgo = currentTimestamp - 7 * 24 * 60 * 60 * 1000;\r\n\r\n    const findClosestPrice = (targetTime: number) => {\r\n      let closest = history[0];\r\n      for (let i = 1; i < history.length; i++) {\r\n        if (Math.abs(history[i].timestamp - targetTime) < Math.abs(closest.timestamp - targetTime)) {\r\n          closest = history[i];\r\n        }\r\n      }\r\n      return closest.price;\r\n    };\r\n\r\n    const hourPrice = findClosestPrice(oneHourAgo);\r\n    const dayPrice = findClosestPrice(oneDayAgo);\r\n    const weekPrice = findClosestPrice(sevenDaysAgo);\r\n\r\n    const calculatePercentage = (oldPrice: number) => \r\n      ((currentPrice - oldPrice) / oldPrice) * 100;\r\n\r\n    return {\r\n      change1h: calculatePercentage(hourPrice),\r\n      change24h: calculatePercentage(dayPrice),\r\n      change7d: calculatePercentage(weekPrice)\r\n    };\r\n  }\r\n\r\n  private handleReconnect(symbols: string[]) {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      setTimeout(() => this.connect(symbols), this.reconnectTimeout);\r\n    } else if (this.dispatch) {\r\n      this.dispatch(setError('Unable to establish WebSocket connection after multiple attempts'));\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport const wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}