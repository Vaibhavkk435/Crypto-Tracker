{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cryptos: [],\n  priceHistory: {},\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst TIMEFRAMES = {\n  '1h': 60 * 60 * 1000,\n  '24h': 24 * 60 * 60 * 1000,\n  '7d': 7 * 24 * 60 * 60 * 1000\n};\nconst calculatePercentageChange = (currentPrice, basePrice) => {\n  if (!basePrice) return 0;\n  const change = (currentPrice - basePrice) / basePrice * 100;\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\n};\nconst getBasePrice = (chartData, timeframe) => {\n  const now = Date.now();\n  const targetTime = now - timeframe;\n  const relevantData = chartData.find(data => data.timestamp >= targetTime);\n  return (relevantData === null || relevantData === void 0 ? void 0 : relevantData.price) || 0;\n};\nexport const cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState,\n  reducers: {\n    setCryptos: (state, action) => {\n      state.cryptos = action.payload.map(crypto => ({\n        ...crypto,\n        chartData: Array(24).fill(0).map((_, i) => ({\n          price: crypto.price,\n          timestamp: Date.now() - (23 - i) * 3600000 // Last 24 hours, 1-hour intervals\n        }))\n      }));\n      state.loading = false;\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setWsConnected: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    updateCryptoPrice: (state, action) => {\n      const crypto = state.cryptos.find(c => c.id.toLowerCase() === action.payload.id.toLowerCase());\n      if (crypto) {\n        const now = Date.now();\n        const oldPrice = crypto.price;\n        crypto.price = action.payload.price;\n\n        // Update chart data\n        crypto.chartData.push({\n          price: action.payload.price,\n          timestamp: now\n        });\n\n        // Keep only last 7 days of data\n        const sevenDaysAgo = now - 7 * 24 * 60 * 60 * 1000;\n        crypto.chartData = crypto.chartData.filter(data => data.timestamp >= sevenDaysAgo);\n\n        // Calculate changes\n        if (oldPrice > 0) {\n          // 1 hour change\n          const oneHourAgo = now - 60 * 60 * 1000;\n          const oneHourPrice = getBasePrice(crypto.chartData, 60 * 60 * 1000);\n          crypto.change1h = calculatePercentageChange(action.payload.price, oneHourPrice);\n\n          // 24 hour change\n          const twentyFourHourPrice = getBasePrice(crypto.chartData, 24 * 60 * 60 * 1000);\n          crypto.change24h = calculatePercentageChange(action.payload.price, twentyFourHourPrice);\n\n          // 7 day change\n          const sevenDayPrice = getBasePrice(crypto.chartData, 7 * 24 * 60 * 60 * 1000);\n          crypto.change7d = calculatePercentageChange(action.payload.price, sevenDayPrice);\n        }\n        crypto.lastUpdate = now;\n      }\n    }\n  }\n});\nexport const {\n  setCryptos,\n  setLoading,\n  setError,\n  setWsConnected,\n  updateCryptoPrice\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cryptos","priceHistory","loading","error","wsConnected","TIMEFRAMES","calculatePercentageChange","currentPrice","basePrice","change","isFinite","Math","round","getBasePrice","chartData","timeframe","now","Date","targetTime","relevantData","find","data","timestamp","price","cryptoSlice","name","reducers","setCryptos","state","action","payload","map","crypto","Array","fill","_","i","setLoading","setError","setWsConnected","updateCryptoPrice","c","id","toLowerCase","oldPrice","push","sevenDaysAgo","filter","oneHourAgo","oneHourPrice","change1h","twentyFourHourPrice","change24h","sevenDayPrice","change7d","lastUpdate","actions","reducer"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/features/crypto/cryptoSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CryptoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  logo: string;\r\n  price: number;\r\n  change1h: number;\r\n  change24h: number;\r\n  change7d: number;\r\n  marketCap: number;\r\n  volume24h: number;\r\n  circulatingSupply: number;\r\n  maxSupply: number | null;\r\n  chartData: { price: number; timestamp: number }[];\r\n  lastUpdate: number;\r\n}\r\n\r\ninterface PriceHistory {\r\n  [symbol: string]: {\r\n    prices: { price: number; timestamp: number }[];\r\n    basePrice1h: number;\r\n    basePrice24h: number;\r\n    basePrice7d: number;\r\n    lastUpdateTime: { [key: string]: number };\r\n  };\r\n}\r\n\r\ninterface CryptoState {\r\n  cryptos: CryptoData[];\r\n  priceHistory: PriceHistory;\r\n  loading: boolean;\r\n  error: string | null;\r\n  wsConnected: boolean;\r\n}\r\n\r\nconst initialState: CryptoState = {\r\n  cryptos: [],\r\n  priceHistory: {},\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false\r\n};\r\n\r\nconst TIMEFRAMES = {\r\n  '1h': 60 * 60 * 1000,\r\n  '24h': 24 * 60 * 60 * 1000,\r\n  '7d': 7 * 24 * 60 * 60 * 1000\r\n};\r\n\r\nconst calculatePercentageChange = (currentPrice: number, basePrice: number): number => {\r\n  if (!basePrice) return 0;\r\n  const change = ((currentPrice - basePrice) / basePrice) * 100;\r\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\r\n};\r\n\r\nconst getBasePrice = (chartData: { price: number; timestamp: number }[], timeframe: number): number => {\r\n  const now = Date.now();\r\n  const targetTime = now - timeframe;\r\n  const relevantData = chartData.find(data => data.timestamp >= targetTime);\r\n  return relevantData?.price || 0;\r\n};\r\n\r\nexport const cryptoSlice = createSlice({\r\n  name: 'crypto',\r\n  initialState,\r\n  reducers: {\r\n    setCryptos: (state, action: PayloadAction<CryptoData[]>) => {\r\n      state.cryptos = action.payload.map(crypto => ({\r\n        ...crypto,\r\n        chartData: Array(24).fill(0).map((_, i) => ({\r\n          price: crypto.price,\r\n          timestamp: Date.now() - (23 - i) * 3600000 // Last 24 hours, 1-hour intervals\r\n        }))\r\n      }));\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setWsConnected: (state, action: PayloadAction<boolean>) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    updateCryptoPrice: (state, action: PayloadAction<{ id: string; price: number }>) => {\r\n      const crypto = state.cryptos.find(c => c.id.toLowerCase() === action.payload.id.toLowerCase());\r\n      if (crypto) {\r\n        const now = Date.now();\r\n        const oldPrice = crypto.price;\r\n        crypto.price = action.payload.price;\r\n        \r\n        // Update chart data\r\n        crypto.chartData.push({\r\n          price: action.payload.price,\r\n          timestamp: now\r\n        });\r\n\r\n        // Keep only last 7 days of data\r\n        const sevenDaysAgo = now - 7 * 24 * 60 * 60 * 1000;\r\n        crypto.chartData = crypto.chartData.filter(data => data.timestamp >= sevenDaysAgo);\r\n\r\n        // Calculate changes\r\n        if (oldPrice > 0) {\r\n          // 1 hour change\r\n          const oneHourAgo = now - 60 * 60 * 1000;\r\n          const oneHourPrice = getBasePrice(crypto.chartData, 60 * 60 * 1000);\r\n          crypto.change1h = calculatePercentageChange(action.payload.price, oneHourPrice);\r\n\r\n          // 24 hour change\r\n          const twentyFourHourPrice = getBasePrice(crypto.chartData, 24 * 60 * 60 * 1000);\r\n          crypto.change24h = calculatePercentageChange(action.payload.price, twentyFourHourPrice);\r\n\r\n          // 7 day change\r\n          const sevenDayPrice = getBasePrice(crypto.chartData, 7 * 24 * 60 * 60 * 1000);\r\n          crypto.change7d = calculatePercentageChange(action.payload.price, sevenDayPrice);\r\n        }\r\n        \r\n        crypto.lastUpdate = now;\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCryptos, \r\n  setLoading, \r\n  setError, \r\n  setWsConnected,\r\n  updateCryptoPrice \r\n} = cryptoSlice.actions;\r\n\r\nexport default cryptoSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}