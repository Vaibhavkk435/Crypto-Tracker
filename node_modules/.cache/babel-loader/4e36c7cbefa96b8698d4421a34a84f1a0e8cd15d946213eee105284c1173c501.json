{"ast":null,"code":"import { updateCryptoPrice, setWsConnected, setError } from '../features/crypto/cryptoSlice';\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.dispatch = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = 3000;\n  }\n  initialize(dispatch, symbols) {\n    this.dispatch = dispatch;\n    this.connect(symbols);\n  }\n  connect(symbols) {\n    try {\n      // Convert symbols to lowercase and create subscription string\n      const streams = symbols.map(symbol => `${symbol.toLowerCase()}usdt@trade`).join('/');\n      const wsUrl = `wss://stream.binance.com:9443/ws/${streams}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket Connected');\n        this.reconnectAttempts = 0;\n        if (this.dispatch) {\n          this.dispatch(setWsConnected(true));\n        }\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.e === 'trade' && this.dispatch) {\n            // Convert symbol to lowercase and remove USDT\n            const symbol = data.s.toLowerCase().replace('usdt', '');\n\n            // Find the corresponding crypto ID\n            const cryptoId = this.getCryptoIdFromSymbol(symbol);\n            if (cryptoId) {\n              this.dispatch(updateCryptoPrice({\n                id: cryptoId,\n                price: parseFloat(data.p)\n              }));\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        if (this.dispatch) {\n          this.dispatch(setWsConnected(false));\n        }\n        this.handleReconnect(symbols);\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        if (this.dispatch) {\n          this.dispatch(setError('WebSocket connection error'));\n        }\n      };\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n      this.handleReconnect(symbols);\n    }\n  }\n  getCryptoIdFromSymbol(symbol) {\n    // Map Binance symbols to crypto IDs\n    const symbolToId = {\n      'btc': 'bitcoin',\n      'eth': 'ethereum',\n      'bnb': 'binancecoin',\n      'sol': 'solana',\n      'ada': 'cardano'\n    };\n    return symbolToId[symbol] || symbol;\n  }\n  handleReconnect(symbols) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => this.connect(symbols), this.reconnectTimeout);\n    } else if (this.dispatch) {\n      this.dispatch(setError('Unable to establish WebSocket connection after multiple attempts'));\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\nexport const wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["updateCryptoPrice","setWsConnected","setError","WebSocketService","constructor","ws","dispatch","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","initialize","symbols","connect","streams","map","symbol","toLowerCase","join","wsUrl","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","e","s","replace","cryptoId","getCryptoIdFromSymbol","id","price","parseFloat","p","error","onclose","handleReconnect","onerror","symbolToId","setTimeout","disconnect","close","wsService"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/services/websocket.ts"],"sourcesContent":["import { Dispatch } from '@reduxjs/toolkit';\r\nimport { updateCryptoPrice, setWsConnected, setError } from '../features/crypto/cryptoSlice';\r\n\r\nclass WebSocketService {\r\n  private ws: WebSocket | null = null;\r\n  private dispatch: Dispatch | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout = 3000;\r\n\r\n  initialize(dispatch: Dispatch, symbols: string[]) {\r\n    this.dispatch = dispatch;\r\n    this.connect(symbols);\r\n  }\r\n\r\n  private connect(symbols: string[]) {\r\n    try {\r\n      // Convert symbols to lowercase and create subscription string\r\n      const streams = symbols.map(symbol => `${symbol.toLowerCase()}usdt@trade`).join('/');\r\n      const wsUrl = `wss://stream.binance.com:9443/ws/${streams}`;\r\n\r\n      this.ws = new WebSocket(wsUrl);\r\n\r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket Connected');\r\n        this.reconnectAttempts = 0;\r\n        if (this.dispatch) {\r\n          this.dispatch(setWsConnected(true));\r\n        }\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.e === 'trade' && this.dispatch) {\r\n            // Convert symbol to lowercase and remove USDT\r\n            const symbol = data.s.toLowerCase().replace('usdt', '');\r\n            \r\n            // Find the corresponding crypto ID\r\n            const cryptoId = this.getCryptoIdFromSymbol(symbol);\r\n            if (cryptoId) {\r\n              this.dispatch(updateCryptoPrice({\r\n                id: cryptoId,\r\n                price: parseFloat(data.p)\r\n              }));\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        if (this.dispatch) {\r\n          this.dispatch(setWsConnected(false));\r\n        }\r\n        this.handleReconnect(symbols);\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        if (this.dispatch) {\r\n          this.dispatch(setError('WebSocket connection error'));\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('WebSocket connection error:', error);\r\n      this.handleReconnect(symbols);\r\n    }\r\n  }\r\n\r\n  private getCryptoIdFromSymbol(symbol: string): string {\r\n    // Map Binance symbols to crypto IDs\r\n    const symbolToId: { [key: string]: string } = {\r\n      'btc': 'bitcoin',\r\n      'eth': 'ethereum',\r\n      'bnb': 'binancecoin',\r\n      'sol': 'solana',\r\n      'ada': 'cardano'\r\n    };\r\n    return symbolToId[symbol] || symbol;\r\n  }\r\n\r\n  private handleReconnect(symbols: string[]) {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      setTimeout(() => this.connect(symbols), this.reconnectTimeout);\r\n    } else if (this.dispatch) {\r\n      this.dispatch(setError('Unable to establish WebSocket connection after multiple attempts'));\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport const wsService = new WebSocketService();\r\nexport default wsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}