{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cryptos: [],\n  priceHistory: {},\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst calculatePercentageChange = (prices, timeframe) => {\n  if (prices.length < 2) return 0;\n  const now = Date.now();\n  const targetTime = now - timeframe;\n\n  // Find the closest price point before the target time\n  let oldPricePoint = prices[0];\n  for (let i = prices.length - 1; i >= 0; i--) {\n    if (prices[i].timestamp <= targetTime) {\n      oldPricePoint = prices[i];\n      break;\n    }\n  }\n  const currentPrice = prices[prices.length - 1].price;\n  return (currentPrice - oldPricePoint.price) / oldPricePoint.price * 100;\n};\nexport const cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState,\n  reducers: {\n    setCryptos: (state, action) => {\n      state.cryptos = action.payload;\n      // Initialize price history for each crypto\n      action.payload.forEach(crypto => {\n        if (!state.priceHistory[crypto.symbol]) {\n          state.priceHistory[crypto.symbol] = {\n            prices: [{\n              price: crypto.price,\n              timestamp: Date.now()\n            }]\n          };\n        }\n      });\n      state.loading = false;\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setWsConnected: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    updateCryptoPrice: (state, action) => {\n      const {\n        symbol,\n        price,\n        timestamp\n      } = action.payload;\n      const crypto = state.cryptos.find(c => c.symbol === symbol);\n      if (crypto) {\n        // Update current price\n        crypto.price = price;\n        crypto.lastUpdate = timestamp;\n\n        // Update price history\n        if (!state.priceHistory[symbol]) {\n          state.priceHistory[symbol] = {\n            prices: []\n          };\n        }\n\n        // Add new price point\n        state.priceHistory[symbol].prices.push({\n          price,\n          timestamp\n        });\n\n        // Keep only last 7 days of price history\n        const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n        state.priceHistory[symbol].prices = state.priceHistory[symbol].prices.filter(p => p.timestamp >= sevenDaysAgo);\n\n        // Update chart data\n        crypto.chartData = [...crypto.chartData.slice(1), price];\n\n        // Calculate percentage changes\n        const prices = state.priceHistory[symbol].prices;\n        if (prices.length >= 2) {\n          crypto.change1h = calculatePercentageChange(prices, 60 * 60 * 1000); // 1 hour\n          crypto.change24h = calculatePercentageChange(prices, 24 * 60 * 60 * 1000); // 24 hours\n          crypto.change7d = calculatePercentageChange(prices, 7 * 24 * 60 * 60 * 1000); // 7 days\n        }\n      }\n    }\n  }\n});\nexport const {\n  setCryptos,\n  setLoading,\n  setError,\n  setWsConnected,\n  updateCryptoPrice\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cryptos","priceHistory","loading","error","wsConnected","calculatePercentageChange","prices","timeframe","length","now","Date","targetTime","oldPricePoint","i","timestamp","currentPrice","price","cryptoSlice","name","reducers","setCryptos","state","action","payload","forEach","crypto","symbol","setLoading","setError","setWsConnected","updateCryptoPrice","find","c","lastUpdate","push","sevenDaysAgo","filter","p","chartData","slice","change1h","change24h","change7d","actions","reducer"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/features/crypto/cryptoSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CryptoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  logo: string;\r\n  price: number;\r\n  change1h: number;\r\n  change24h: number;\r\n  change7d: number;\r\n  marketCap: number;\r\n  volume24h: number;\r\n  circulatingSupply: number;\r\n  maxSupply: number | null;\r\n  chartData: number[];\r\n  lastUpdate: number;\r\n}\r\n\r\ninterface PriceHistory {\r\n  [symbol: string]: {\r\n    prices: { price: number; timestamp: number }[];\r\n  };\r\n}\r\n\r\ninterface CryptoState {\r\n  cryptos: CryptoData[];\r\n  priceHistory: PriceHistory;\r\n  loading: boolean;\r\n  error: string | null;\r\n  wsConnected: boolean;\r\n}\r\n\r\nconst initialState: CryptoState = {\r\n  cryptos: [],\r\n  priceHistory: {},\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false\r\n};\r\n\r\nconst calculatePercentageChange = (prices: { price: number; timestamp: number }[], timeframe: number): number => {\r\n  if (prices.length < 2) return 0;\r\n  \r\n  const now = Date.now();\r\n  const targetTime = now - timeframe;\r\n  \r\n  // Find the closest price point before the target time\r\n  let oldPricePoint = prices[0];\r\n  for (let i = prices.length - 1; i >= 0; i--) {\r\n    if (prices[i].timestamp <= targetTime) {\r\n      oldPricePoint = prices[i];\r\n      break;\r\n    }\r\n  }\r\n  \r\n  const currentPrice = prices[prices.length - 1].price;\r\n  return ((currentPrice - oldPricePoint.price) / oldPricePoint.price) * 100;\r\n};\r\n\r\nexport const cryptoSlice = createSlice({\r\n  name: 'crypto',\r\n  initialState,\r\n  reducers: {\r\n    setCryptos: (state, action: PayloadAction<CryptoData[]>) => {\r\n      state.cryptos = action.payload;\r\n      // Initialize price history for each crypto\r\n      action.payload.forEach(crypto => {\r\n        if (!state.priceHistory[crypto.symbol]) {\r\n          state.priceHistory[crypto.symbol] = {\r\n            prices: [{\r\n              price: crypto.price,\r\n              timestamp: Date.now()\r\n            }]\r\n          };\r\n        }\r\n      });\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setWsConnected: (state, action: PayloadAction<boolean>) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    updateCryptoPrice: (state, action: PayloadAction<{\r\n      symbol: string;\r\n      price: number;\r\n      timestamp: number;\r\n    }>) => {\r\n      const { symbol, price, timestamp } = action.payload;\r\n      const crypto = state.cryptos.find(c => c.symbol === symbol);\r\n      \r\n      if (crypto) {\r\n        // Update current price\r\n        crypto.price = price;\r\n        crypto.lastUpdate = timestamp;\r\n        \r\n        // Update price history\r\n        if (!state.priceHistory[symbol]) {\r\n          state.priceHistory[symbol] = { prices: [] };\r\n        }\r\n        \r\n        // Add new price point\r\n        state.priceHistory[symbol].prices.push({ price, timestamp });\r\n        \r\n        // Keep only last 7 days of price history\r\n        const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n        state.priceHistory[symbol].prices = state.priceHistory[symbol].prices.filter(\r\n          p => p.timestamp >= sevenDaysAgo\r\n        );\r\n        \r\n        // Update chart data\r\n        crypto.chartData = [...crypto.chartData.slice(1), price];\r\n        \r\n        // Calculate percentage changes\r\n        const prices = state.priceHistory[symbol].prices;\r\n        if (prices.length >= 2) {\r\n          crypto.change1h = calculatePercentageChange(prices, 60 * 60 * 1000); // 1 hour\r\n          crypto.change24h = calculatePercentageChange(prices, 24 * 60 * 60 * 1000); // 24 hours\r\n          crypto.change7d = calculatePercentageChange(prices, 7 * 24 * 60 * 60 * 1000); // 7 days\r\n        }\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCryptos, \r\n  setLoading, \r\n  setError, \r\n  setWsConnected,\r\n  updateCryptoPrice \r\n} = cryptoSlice.actions;\r\n\r\nexport default cryptoSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}