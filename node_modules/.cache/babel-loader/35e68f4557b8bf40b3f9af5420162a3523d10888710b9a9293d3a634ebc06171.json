{"ast":null,"code":"import { updateCryptoPrice, setWsConnected, setError } from '../features/crypto/cryptoSlice';\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.dispatch = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = 3000;\n    this.lastPrices = {};\n  }\n  initialize(dispatch, symbols) {\n    this.dispatch = dispatch;\n    this.connect(symbols);\n  }\n  connect(symbols) {\n    try {\n      // Convert symbols to lowercase and create subscription string\n      const streams = symbols.map(symbol => `${symbol.toLowerCase()}usdt@trade`).join('/');\n      const wsUrl = `wss://stream.binance.com:9443/ws/${streams}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket Connected');\n        this.reconnectAttempts = 0;\n        if (this.dispatch) {\n          this.dispatch(setWsConnected(true));\n        }\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.e === 'trade' && this.dispatch) {\n            const symbol = data.s.replace('USDT', '');\n            const price = parseFloat(data.p);\n\n            // Only dispatch if price has changed\n            if (this.lastPrices[symbol] !== price) {\n              this.lastPrices[symbol] = price;\n              this.dispatch(updateCryptoPrice({\n                symbol,\n                price,\n                timestamp: data.T\n              }));\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        if (this.dispatch) {\n          this.dispatch(setWsConnected(false));\n        }\n        this.handleReconnect(symbols);\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        if (this.dispatch) {\n          this.dispatch(setError('WebSocket connection error'));\n        }\n      };\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n      this.handleReconnect(symbols);\n    }\n  }\n  handleReconnect(symbols) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => this.connect(symbols), this.reconnectTimeout);\n    } else if (this.dispatch) {\n      this.dispatch(setError('Unable to establish WebSocket connection after multiple attempts'));\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\nexport const wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["updateCryptoPrice","setWsConnected","setError","WebSocketService","constructor","ws","dispatch","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","lastPrices","initialize","symbols","connect","streams","map","symbol","toLowerCase","join","wsUrl","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","e","s","replace","price","parseFloat","p","timestamp","T","error","onclose","handleReconnect","onerror","setTimeout","disconnect","close","wsService"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/services/websocket.ts"],"sourcesContent":["import { Dispatch } from '@reduxjs/toolkit';\r\nimport { updateCryptoPrice, setWsConnected, setError } from '../features/crypto/cryptoSlice';\r\n\r\nclass WebSocketService {\r\n  private ws: WebSocket | null = null;\r\n  private dispatch: Dispatch | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout = 3000;\r\n  private lastPrices: { [symbol: string]: number } = {};\r\n\r\n  initialize(dispatch: Dispatch, symbols: string[]) {\r\n    this.dispatch = dispatch;\r\n    this.connect(symbols);\r\n  }\r\n\r\n  private connect(symbols: string[]) {\r\n    try {\r\n      // Convert symbols to lowercase and create subscription string\r\n      const streams = symbols.map(symbol => `${symbol.toLowerCase()}usdt@trade`).join('/');\r\n      const wsUrl = `wss://stream.binance.com:9443/ws/${streams}`;\r\n\r\n      this.ws = new WebSocket(wsUrl);\r\n\r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket Connected');\r\n        this.reconnectAttempts = 0;\r\n        if (this.dispatch) {\r\n          this.dispatch(setWsConnected(true));\r\n        }\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.e === 'trade' && this.dispatch) {\r\n            const symbol = data.s.replace('USDT', '');\r\n            const price = parseFloat(data.p);\r\n            \r\n            // Only dispatch if price has changed\r\n            if (this.lastPrices[symbol] !== price) {\r\n              this.lastPrices[symbol] = price;\r\n              this.dispatch(updateCryptoPrice({\r\n                symbol,\r\n                price,\r\n                timestamp: data.T,\r\n              }));\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        if (this.dispatch) {\r\n          this.dispatch(setWsConnected(false));\r\n        }\r\n        this.handleReconnect(symbols);\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        if (this.dispatch) {\r\n          this.dispatch(setError('WebSocket connection error'));\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('WebSocket connection error:', error);\r\n      this.handleReconnect(symbols);\r\n    }\r\n  }\r\n\r\n  private handleReconnect(symbols: string[]) {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      setTimeout(() => this.connect(symbols), this.reconnectTimeout);\r\n    } else if (this.dispatch) {\r\n      this.dispatch(setError('Unable to establish WebSocket connection after multiple attempts'));\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport const wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}