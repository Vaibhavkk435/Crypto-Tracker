{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cryptos: [],\n  priceHistory: {},\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst TIMEFRAMES = {\n  '1h': 60 * 60 * 1000,\n  '24h': 24 * 60 * 60 * 1000,\n  '7d': 7 * 24 * 60 * 60 * 1000\n};\nconst calculatePercentageChange = (currentPrice, basePrice) => {\n  if (!basePrice) return 0;\n  const change = (currentPrice - basePrice) / basePrice * 100;\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\n};\nexport const cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState,\n  reducers: {\n    setCryptos: (state, action) => {\n      state.cryptos = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setWsConnected: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    updateCryptoPrice: (state, action) => {\n      const crypto = state.cryptos.find(c => c.id.toLowerCase() === action.payload.id.toLowerCase());\n      if (crypto) {\n        const oldPrice = crypto.price;\n        crypto.price = action.payload.price;\n        if (oldPrice > 0) {\n          crypto.change1h = calculatePercentageChange(action.payload.price, oldPrice);\n\n          // Update chart data\n          crypto.chartData = [...crypto.chartData.slice(1), action.payload.price];\n\n          // Calculate 24h change based on first price in chart data\n          if (crypto.chartData.length > 0) {\n            const oldestPrice = crypto.chartData[0];\n            crypto.change24h = calculatePercentageChange(action.payload.price, oldestPrice);\n          }\n        }\n        crypto.lastUpdate = Date.now();\n      }\n    }\n  }\n});\nexport const {\n  setCryptos,\n  setLoading,\n  setError,\n  setWsConnected,\n  updateCryptoPrice\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cryptos","priceHistory","loading","error","wsConnected","TIMEFRAMES","calculatePercentageChange","currentPrice","basePrice","change","isFinite","Math","round","cryptoSlice","name","reducers","setCryptos","state","action","payload","setLoading","setError","setWsConnected","updateCryptoPrice","crypto","find","c","id","toLowerCase","oldPrice","price","change1h","chartData","slice","length","oldestPrice","change24h","lastUpdate","Date","now","actions","reducer"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/features/crypto/cryptoSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CryptoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  logo: string;\r\n  price: number;\r\n  change1h: number;\r\n  change24h: number;\r\n  change7d: number;\r\n  marketCap: number;\r\n  volume24h: number;\r\n  circulatingSupply: number;\r\n  maxSupply: number | null;\r\n  chartData: number[];\r\n  lastUpdate: number;\r\n}\r\n\r\ninterface PriceHistory {\r\n  [symbol: string]: {\r\n    prices: { price: number; timestamp: number }[];\r\n    basePrice1h: number;\r\n    basePrice24h: number;\r\n    basePrice7d: number;\r\n    lastUpdateTime: { [key: string]: number };\r\n  };\r\n}\r\n\r\ninterface CryptoState {\r\n  cryptos: CryptoData[];\r\n  priceHistory: PriceHistory;\r\n  loading: boolean;\r\n  error: string | null;\r\n  wsConnected: boolean;\r\n}\r\n\r\nconst initialState: CryptoState = {\r\n  cryptos: [],\r\n  priceHistory: {},\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false\r\n};\r\n\r\nconst TIMEFRAMES = {\r\n  '1h': 60 * 60 * 1000,\r\n  '24h': 24 * 60 * 60 * 1000,\r\n  '7d': 7 * 24 * 60 * 60 * 1000\r\n};\r\n\r\nconst calculatePercentageChange = (currentPrice: number, basePrice: number): number => {\r\n  if (!basePrice) return 0;\r\n  const change = ((currentPrice - basePrice) / basePrice) * 100;\r\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\r\n};\r\n\r\nexport const cryptoSlice = createSlice({\r\n  name: 'crypto',\r\n  initialState,\r\n  reducers: {\r\n    setCryptos: (state, action: PayloadAction<CryptoData[]>) => {\r\n      state.cryptos = action.payload;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setWsConnected: (state, action: PayloadAction<boolean>) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    updateCryptoPrice: (state, action: PayloadAction<{ id: string; price: number }>) => {\r\n      const crypto = state.cryptos.find(c => c.id.toLowerCase() === action.payload.id.toLowerCase());\r\n      if (crypto) {\r\n        const oldPrice = crypto.price;\r\n        crypto.price = action.payload.price;\r\n        \r\n        if (oldPrice > 0) {\r\n          crypto.change1h = calculatePercentageChange(action.payload.price, oldPrice);\r\n          \r\n          // Update chart data\r\n          crypto.chartData = [...crypto.chartData.slice(1), action.payload.price];\r\n          \r\n          // Calculate 24h change based on first price in chart data\r\n          if (crypto.chartData.length > 0) {\r\n            const oldestPrice = crypto.chartData[0];\r\n            crypto.change24h = calculatePercentageChange(action.payload.price, oldestPrice);\r\n          }\r\n        }\r\n        \r\n        crypto.lastUpdate = Date.now();\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCryptos, \r\n  setLoading, \r\n  setError, \r\n  setWsConnected,\r\n  updateCryptoPrice \r\n} = cryptoSlice.actions;\r\n\r\nexport default cryptoSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}