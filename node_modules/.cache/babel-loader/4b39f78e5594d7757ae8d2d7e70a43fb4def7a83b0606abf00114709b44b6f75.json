{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cryptos: [],\n  priceHistory: {},\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst TIMEFRAMES = {\n  '1h': 60 * 60 * 1000,\n  '24h': 24 * 60 * 60 * 1000,\n  '7d': 7 * 24 * 60 * 60 * 1000\n};\nconst calculatePercentageChange = (currentPrice, basePrice) => {\n  if (!basePrice) return 0;\n  const change = (currentPrice - basePrice) / basePrice * 100;\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\n};\nconst getBasePrice = (chartData, timeframe) => {\n  const now = Date.now();\n  const targetTime = now - timeframe;\n  const relevantData = chartData.find(data => data.timestamp >= targetTime);\n  return (relevantData === null || relevantData === void 0 ? void 0 : relevantData.price) || 0;\n};\nexport const cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState,\n  reducers: {\n    setCryptos: (state, action) => {\n      state.cryptos = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setWsConnected: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    updateCryptoPrice: (state, action) => {\n      const crypto = state.cryptos.find(c => c.id.toLowerCase() === action.payload.id.toLowerCase());\n      if (crypto) {\n        const oldPrice = crypto.price;\n        crypto.price = action.payload.price;\n\n        // Update market cap based on new price\n        crypto.marketCap = crypto.circulatingSupply * action.payload.price;\n\n        // Add new price point to chart data\n        crypto.chartData.push({\n          price: action.payload.price,\n          timestamp: action.payload.timestamp\n        });\n\n        // Keep only last 7 days of data\n        const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n        crypto.chartData = crypto.chartData.filter(data => data.timestamp >= sevenDaysAgo);\n\n        // Sort chart data by timestamp\n        crypto.chartData.sort((a, b) => a.timestamp - b.timestamp);\n\n        // Calculate changes\n        if (oldPrice > 0) {\n          // Find base prices for different time periods\n          const oneHourAgo = Date.now() - 60 * 60 * 1000;\n          const twentyFourHoursAgo = Date.now() - 24 * 60 * 60 * 1000;\n          const oneHourData = crypto.chartData.find(data => data.timestamp <= oneHourAgo);\n          const twentyFourHourData = crypto.chartData.find(data => data.timestamp <= twentyFourHoursAgo);\n          const sevenDayData = crypto.chartData.find(data => data.timestamp <= sevenDaysAgo);\n          crypto.change1h = calculatePercentageChange(action.payload.price, (oneHourData === null || oneHourData === void 0 ? void 0 : oneHourData.price) || oldPrice);\n          crypto.change24h = calculatePercentageChange(action.payload.price, (twentyFourHourData === null || twentyFourHourData === void 0 ? void 0 : twentyFourHourData.price) || oldPrice);\n          crypto.change7d = calculatePercentageChange(action.payload.price, (sevenDayData === null || sevenDayData === void 0 ? void 0 : sevenDayData.price) || oldPrice);\n        }\n        crypto.lastUpdate = Date.now();\n      }\n    }\n  }\n});\nexport const {\n  setCryptos,\n  setLoading,\n  setError,\n  setWsConnected,\n  updateCryptoPrice\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cryptos","priceHistory","loading","error","wsConnected","TIMEFRAMES","calculatePercentageChange","currentPrice","basePrice","change","isFinite","Math","round","getBasePrice","chartData","timeframe","now","Date","targetTime","relevantData","find","data","timestamp","price","cryptoSlice","name","reducers","setCryptos","state","action","payload","setLoading","setError","setWsConnected","updateCryptoPrice","crypto","c","id","toLowerCase","oldPrice","marketCap","circulatingSupply","push","sevenDaysAgo","filter","sort","a","b","oneHourAgo","twentyFourHoursAgo","oneHourData","twentyFourHourData","sevenDayData","change1h","change24h","change7d","lastUpdate","actions","reducer"],"sources":["C:/Users/DELL/OneDrive/Desktop/XYZ/src/features/crypto/cryptoSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface CryptoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  logo: string;\r\n  price: number;\r\n  change1h: number;\r\n  change24h: number;\r\n  change7d: number;\r\n  marketCap: number;\r\n  volume24h: number;\r\n  circulatingSupply: number;\r\n  maxSupply: number | null;\r\n  chartData: { price: number; timestamp: number }[];\r\n  lastUpdate: number;\r\n}\r\n\r\ninterface PriceUpdate {\r\n  id: string;\r\n  price: number;\r\n  timestamp: number;\r\n}\r\n\r\ninterface PriceHistory {\r\n  [symbol: string]: {\r\n    prices: { price: number; timestamp: number }[];\r\n    basePrice1h: number;\r\n    basePrice24h: number;\r\n    basePrice7d: number;\r\n    lastUpdateTime: { [key: string]: number };\r\n  };\r\n}\r\n\r\ninterface CryptoState {\r\n  cryptos: CryptoData[];\r\n  priceHistory: PriceHistory;\r\n  loading: boolean;\r\n  error: string | null;\r\n  wsConnected: boolean;\r\n}\r\n\r\nconst initialState: CryptoState = {\r\n  cryptos: [],\r\n  priceHistory: {},\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false\r\n};\r\n\r\nconst TIMEFRAMES = {\r\n  '1h': 60 * 60 * 1000,\r\n  '24h': 24 * 60 * 60 * 1000,\r\n  '7d': 7 * 24 * 60 * 60 * 1000\r\n};\r\n\r\nconst calculatePercentageChange = (currentPrice: number, basePrice: number): number => {\r\n  if (!basePrice) return 0;\r\n  const change = ((currentPrice - basePrice) / basePrice) * 100;\r\n  return isFinite(change) ? Math.round(change * 100) / 100 : 0;\r\n};\r\n\r\nconst getBasePrice = (chartData: { price: number; timestamp: number }[], timeframe: number): number => {\r\n  const now = Date.now();\r\n  const targetTime = now - timeframe;\r\n  const relevantData = chartData.find(data => data.timestamp >= targetTime);\r\n  return relevantData?.price || 0;\r\n};\r\n\r\nexport const cryptoSlice = createSlice({\r\n  name: 'crypto',\r\n  initialState,\r\n  reducers: {\r\n    setCryptos: (state, action: PayloadAction<CryptoData[]>) => {\r\n      state.cryptos = action.payload;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setWsConnected: (state, action: PayloadAction<boolean>) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    updateCryptoPrice: (state, action: PayloadAction<PriceUpdate>) => {\r\n      const crypto = state.cryptos.find(c => c.id.toLowerCase() === action.payload.id.toLowerCase());\r\n      if (crypto) {\r\n        const oldPrice = crypto.price;\r\n        crypto.price = action.payload.price;\r\n        \r\n        // Update market cap based on new price\r\n        crypto.marketCap = crypto.circulatingSupply * action.payload.price;\r\n        \r\n        // Add new price point to chart data\r\n        crypto.chartData.push({\r\n          price: action.payload.price,\r\n          timestamp: action.payload.timestamp\r\n        });\r\n\r\n        // Keep only last 7 days of data\r\n        const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n        crypto.chartData = crypto.chartData.filter(data => data.timestamp >= sevenDaysAgo);\r\n\r\n        // Sort chart data by timestamp\r\n        crypto.chartData.sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n        // Calculate changes\r\n        if (oldPrice > 0) {\r\n          // Find base prices for different time periods\r\n          const oneHourAgo = Date.now() - 60 * 60 * 1000;\r\n          const twentyFourHoursAgo = Date.now() - 24 * 60 * 60 * 1000;\r\n\r\n          const oneHourData = crypto.chartData.find(data => data.timestamp <= oneHourAgo);\r\n          const twentyFourHourData = crypto.chartData.find(data => data.timestamp <= twentyFourHoursAgo);\r\n          const sevenDayData = crypto.chartData.find(data => data.timestamp <= sevenDaysAgo);\r\n\r\n          crypto.change1h = calculatePercentageChange(action.payload.price, oneHourData?.price || oldPrice);\r\n          crypto.change24h = calculatePercentageChange(action.payload.price, twentyFourHourData?.price || oldPrice);\r\n          crypto.change7d = calculatePercentageChange(action.payload.price, sevenDayData?.price || oldPrice);\r\n        }\r\n        \r\n        crypto.lastUpdate = Date.now();\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCryptos, \r\n  setLoading, \r\n  setError, \r\n  setWsConnected,\r\n  updateCryptoPrice \r\n} = cryptoSlice.actions;\r\n\r\nexport default cryptoSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}